import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "@/globals.css";
import Header from "@/components/header";
import Footer from "@/components/footer";
import Image from "next/image";
import { cookies } from "next/headers";
import { jwtDecode } from "jwt-decode";
import { ThemeProvider } from "@/components/theme-provider"
import UserProvider from '@/contexts/UserProvider';
import { AuthModalProvider } from '@/contexts/AuthModalContext';
import AuthModal from '@/components/auth/AuthModal';

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default async function RootLayout({ children, }: Readonly<{ children: React.ReactNode; }>) {
  const cookieStore = await cookies();
  const SSToken: any = cookieStore.get('SSToken');
  async function userInfor(): Promise<any> {
    if (!SSToken) return null;

    try {
      const decoded: any = jwtDecode(SSToken.value);
      if (!decoded?.data) return null;

      const res = await fetch('http://localhost:3000/api/user', {
        method: 'POST',
        headers: {
          Authorization: `Bearer ${SSToken.value}`,
        },
        cache: 'no-store',
      });

      if (!res.ok) {
        console.error('Failed to fetch user info:', res.status);
        return null;
      }

      const response = await res.json();
      return response?.data?.userInfor || decoded.data || null;
    } catch (error) {
      console.error("Error in userInfor():", error);
      return null;
    }
  }

  const infor = await userInfor();

  return (
    <html lang="en" suppressHydrationWarning>
      <head>
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/pannellum@2.5.6/build/pannellum.css" />
        <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/pannellum@2.5.6/build/pannellum.js"></script>
      </head>
      <body
        className={`${geistSans.variable} antialiased relative`}
      >
        <ThemeProvider
          attribute="class"
          defaultTheme="system"
          enableSystem
          disableTransitionOnChange
        >
          <UserProvider value={infor}>
            <AuthModalProvider>
              <AuthModal /> {/* Hiển thị modal nếu mở */}
              {/* <div className="fixed bottom-4 right-4 bg-default-color p-3 rounded-full cursor-pointer">
                <Image src="/images/chatbot.webp" alt="" width={30} height={30} />
              </div> */}
              <Header></Header>
              {children}
              <Footer></Footer>
            </AuthModalProvider>
          </UserProvider>
        </ThemeProvider>
      </body>
    </html>
  );
}
